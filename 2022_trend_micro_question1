"""
You are given an implementation of a function:
  def solution(S)
that given a non-empty string consisting of N lowercase Engine letters, 
returns the characters which occurs most frequently in the sting.  
If more than one character satisfies this requirement, the function should return the earlies alphabetically.
For example, if both c and d are the most frequent letters, then the answer is c.
For example, given a string:
S = "hello"
the function should return "l". It appears twices in S. No other characters appear as frequently.
The attached code is still incorrect for sime inputs Despite the error(s), 
the code may produce a correct answer for the example test cases.
The goal of the exercise is to find and fix the bug(s) in the implementation. 
You can modify at most four lines.
Write an efficient algorithm for the following assumptions:
* N is an integer within the range[1..100,000]
* String S is mad only of lowercase letters(a-z).
"""
def solution(S):
    occurrences = [0] * 26
    for i in range(len(S)):
        occurrences[ord(S[i]) - ord('a')] += 1
    best_char = 'a'
    best_res = 0
    for i in range(1, 26):
        if occurrences[i] >= best_res:
            best_char = chr(ord('a')+i)
            best_res = occurrences[i]
    best_index = occurrences.index(best_res)
    best_char = chr(ord('a')+best_index)
    return best_res


if _name_ == "__main__":
    S = "helloaa"
    solution(S)
